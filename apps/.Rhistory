library(shiny); runApp('wprdc_sql.R')
library(pool)
install.packages(c("leaflet.providers", "readit"))
library(leaflet)
library(rgdal)
#reading in all the files for the
#mostly points for the first map (greenways are polygons, bridges are lines)
greenways <- readOGR("http://pghgis-pittsburghpa.opendata.arcgis.com/datasets/d6cb53f628eb49e2991f51b07ff32bad_0.geojson")
ballfields <- readOGR("http://pghgis-pittsburghpa.opendata.arcgis.com/datasets/87f3b2bdfa6646319a56e86521480efd_0.geojson")
playgrounds <- readOGR("https://data.wprdc.org/dataset/4b9c5947-5645-4dbc-a7b6-eb323418fe02/resource/eb0cf52f-3da1-4b77-8f6d-891dff8adfa0/download/playgroundequipment_img.geojson")
##point files for Pgh disposal sites and smart trash cans.
trash2 <- readOGR("https://data.wprdc.org/dataset/10dd50cf-bf29-4268-83e2-debcacea7885/resource/cdb6c800-3213-4190-8d39-495e36300263/download/wasterecovery_img.geojson")
trash <- readOGR("https://data.wprdc.org/dataset/b1282e47-6a70-4f18-98df-f081e7406e34/resource/5c7edf21-421c-40ec-b851-d55aa5b3585f/download/smart_trash_containers.geojson")
bridges <- readOGR("https://data.wprdc.org/dataset/d6e6c012-45f0-4e13-ab3b-9458fd56ad96/resource/c972b2cc-8396-4cd0-80d6-3051497da903/download/bridges_img.geojson")
#polygon files for wards and precincts
wards <- readOGR("http://pghgis-pittsburghpa.opendata.arcgis.com/datasets/dff605f73fe24791875567f1d942275d_0.geojson")
precincts <- readOGR("http://openac-alcogis.opendata.arcgis.com/datasets/faaf42d7eaa041cb9fa623ac7b42f475_0.geojson")
#2016 general election data
general16 <- read.csv("https://data.wprdc.org/dataset/ea85f4b5-0b95-41b8-86ee-f1e6d16fc409/resource/3e8b23b7-aa71-4850-9379-bce87f73d684/download/2016-general-election-results-by-precinct.csv")
#point map
#start with default basemap, then add satelite view, a black and white (AKA printer friendly) view, and a topographical basemap, AKA wrinkled.
#From there, I added some points and polygons of some of the places you should put trash and places you shouldnt put trash. I had to take out one of the trash groups because it was for the county, and messed up the map zoom.
mp <- leaflet() %>%
addProviderTiles(providers$Hydda.Full, group = "Default") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "Satellite View") %>%
addProviderTiles(providers$CartoDB.Positron, group = "Printer Friendly") %>%
addProviderTiles(providers$Stamen.TopOSMRelief, group = "Wrinkled") %>%
addCircles(data = trash, group = "Put trash here", color = "magenta", weight = 2) %>%
addPolygons(data = greenways, group = "Don't leave trash here", color = "green")  %>%
addCircles(data = ballfields, group = "Don't leave trash here", color = "lawngreen", weight = 6)  %>%
addCircles(data = playgrounds, group = "Don't leave trash here", color = "chartreuse", weight = 4)  %>%
addPolylines(data = bridges, group = "Definitely don't toss trash off these", color = "yellow", weight = 8) %>%
#this creates the box that lets you toggle the basemap and grouped layers
addLayersControl(
baseGroups = c("Default", "Satellite View", "Printer Friendly", "Wrinkled"),
overlayGroups = c("Put trash here", "Dont leave trash here", "Definitely don't toss trash off these"),
#this keeps the box from being a pop out
options = layersControlOptions(collapsed = FALSE)
)
#this prints the map
mp
#trashy
# a simple map of Pittsburgh Bridges. Its also in the first map, bu I wasnt sure if you wanted each type of tile to have a map, so I left this one here. I had to change that awful default map though
ml <- leaflet() %>%
addProviderTiles(providers$Hydda.Full) %>%
addPolylines(data = bridges, color = "black")
ml
#filtering the data here for the total # of votes.
gen16total <- general16 %>%
filter(Contest.Title == "BALLOTS CAST - TOTAL")
#joining the precincts to the voter data for the choropleth
precinctvotes <- geo_join(precincts, gen16total, "Muni_War_1", "Precinct.Name")
??geo_join
library(leaflet)
library(rgdal)
library(tigris)
#reading in all the files for the
#mostly points for the first map (greenways are polygons, bridges are lines)
greenways <- readOGR("http://pghgis-pittsburghpa.opendata.arcgis.com/datasets/d6cb53f628eb49e2991f51b07ff32bad_0.geojson")
ballfields <- readOGR("http://pghgis-pittsburghpa.opendata.arcgis.com/datasets/87f3b2bdfa6646319a56e86521480efd_0.geojson")
playgrounds <- readOGR("https://data.wprdc.org/dataset/4b9c5947-5645-4dbc-a7b6-eb323418fe02/resource/eb0cf52f-3da1-4b77-8f6d-891dff8adfa0/download/playgroundequipment_img.geojson")
##point files for Pgh disposal sites and smart trash cans.
trash2 <- readOGR("https://data.wprdc.org/dataset/10dd50cf-bf29-4268-83e2-debcacea7885/resource/cdb6c800-3213-4190-8d39-495e36300263/download/wasterecovery_img.geojson")
trash <- readOGR("https://data.wprdc.org/dataset/b1282e47-6a70-4f18-98df-f081e7406e34/resource/5c7edf21-421c-40ec-b851-d55aa5b3585f/download/smart_trash_containers.geojson")
bridges <- readOGR("https://data.wprdc.org/dataset/d6e6c012-45f0-4e13-ab3b-9458fd56ad96/resource/c972b2cc-8396-4cd0-80d6-3051497da903/download/bridges_img.geojson")
#polygon files for wards and precincts
wards <- readOGR("http://pghgis-pittsburghpa.opendata.arcgis.com/datasets/dff605f73fe24791875567f1d942275d_0.geojson")
precincts <- readOGR("http://openac-alcogis.opendata.arcgis.com/datasets/faaf42d7eaa041cb9fa623ac7b42f475_0.geojson")
gen16total <- general16 %>%
filter(Contest.Title == "BALLOTS CAST - TOTAL")
library(utils)
knitr::opts_chunk$set(echo = TRUE)
library(httr) # http rest requests
library(jsonlite) # fromJSON
library(utils) # URLencode functions
url <- URLencode('https://data.wprdc.org/api/action/datastore_search_sql?sql=SELECET * FROM "1797ead8-8262-41cc-9099-cbc8a161924b"', repeated = TRUE)
get <- GET(url)
results <- fromJSON(content(get, "text"))$result$records
url
url <- URLencode('https://data.wprdc.org/api/action/datastore_search_sql?sql=SELECT * FROM "1797ead8-8262-41cc-9099-cbc8a161924b"', repeated = TRUE)
get <- GET(url)
results <- fromJSON(content(get, "text"))$result$records
??readOGR
knitr::opts_chunk$set(echo = TRUE)
library(httr) # http rest requests
library(jsonlite) # fromJSON
library(utils) # URLencode functions
library(rgdal) # readOGR
# Load as geojson
polls <- readOGR("https://services1.arcgis.com/vdNDkVykv9vEWFX4/ArcGIS/rest/services/Allegheny_County_Polling_Places_May2019/FeatureServer/0/query?where=MuniName+%3D+%27Pittsburgh%27&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=*&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pgeojson&token=")
plot(polls)
shiny::runApp('~/Documents/GitHub/Class_11-API-DBs/API')
runApp('~/Documents/GitHub/Class-13 SQL_Databases/apps/wprdc_sql.R')
runApp('wprdc_sql.R')
